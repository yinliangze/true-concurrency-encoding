model DiningPhilosopher

port type Port


connector type rendezvous2(Port p1, Port p2)
	define p1 p2
end

connector type rendezvous3(Port p1, Port p2, Port p3)
	define p1 p2 p3
end

connector type single(Port p1)
	define p1
end

atomic type Philosopher
	export port Port think
	export port Port eat
	export port Port pick_l
	export port Port pick_r
	export port Port put
	place THINKING, HAS_ONE_FORK, HAS_TWO_FORK, FINISH
		initial to THINKING
		on think
			from THINKING to THINKING
		on pick_l
			from THINKING to HAS_ONE_FORK
		on pick_r
			from HAS_ONE_FORK to HAS_TWO_FORK
		on eat
			from HAS_TWO_FORK to FINISH
		on put
			from FINISH to THINKING
end

atomic type Fork
	export port Port pick
	export port Port put
	place FREE, USED
		initial to FREE
		on pick
			from FREE to USED
		on put
			from USED to FREE
end


compound type Philos
	component Philosopher P1
	component Fork F1
	component Philosopher P2
	component Fork F2
	component Philosopher P3
	component Fork F3
	component Philosopher P4
	component Fork F4
	component Philosopher P5
	component Fork F5
	component Philosopher P6
	component Fork F6
	component Philosopher P7
	component Fork F7
	component Philosopher P8
	component Fork F8
	component Philosopher P9
	component Fork F9
	component Philosopher P10
	component Fork F10

	connector single P1_think(P1.think)
	connector single P1_eat(P1.eat)
	connector rendezvous2 P1_pick_l(P1.pick_l, F1.pick)
	connector rendezvous2 P1_pick_r(P1.pick_r, F10.pick)
	connector rendezvous3 P1_put(P1.put, F1.put, F10.put)

	connector single P2_think(P2.think)
	connector single P2_eat(P2.eat)
	connector rendezvous2 P2_pick_l(P2.pick_l, F2.pick)
	connector rendezvous2 P2_pick_r(P2.pick_r, F1.pick)
	connector rendezvous3 P2_put(P2.put, F2.put, F1.put)

	connector single P3_think(P3.think)
	connector single P3_eat(P3.eat)
	connector rendezvous2 P3_pick_l(P3.pick_l, F3.pick)
	connector rendezvous2 P3_pick_r(P3.pick_r, F2.pick)
	connector rendezvous3 P3_put(P3.put, F3.put, F2.put)

	connector single P4_think(P4.think)
	connector single P4_eat(P4.eat)
	connector rendezvous2 P4_pick_l(P4.pick_l, F4.pick)
	connector rendezvous2 P4_pick_r(P4.pick_r, F3.pick)
	connector rendezvous3 P4_put(P4.put, F4.put, F3.put)

	connector single P5_think(P5.think)
	connector single P5_eat(P5.eat)
	connector rendezvous2 P5_pick_l(P5.pick_l, F5.pick)
	connector rendezvous2 P5_pick_r(P5.pick_r, F4.pick)
	connector rendezvous3 P5_put(P5.put, F5.put, F4.put)

	connector single P6_think(P6.think)
	connector single P6_eat(P6.eat)
	connector rendezvous2 P6_pick_l(P6.pick_l, F6.pick)
	connector rendezvous2 P6_pick_r(P6.pick_r, F5.pick)
	connector rendezvous3 P6_put(P6.put, F6.put, F5.put)

	connector single P7_think(P7.think)
	connector single P7_eat(P7.eat)
	connector rendezvous2 P7_pick_l(P7.pick_l, F7.pick)
	connector rendezvous2 P7_pick_r(P7.pick_r, F6.pick)
	connector rendezvous3 P7_put(P7.put, F7.put, F6.put)

	connector single P8_think(P8.think)
	connector single P8_eat(P8.eat)
	connector rendezvous2 P8_pick_l(P8.pick_l, F8.pick)
	connector rendezvous2 P8_pick_r(P8.pick_r, F7.pick)
	connector rendezvous3 P8_put(P8.put, F8.put, F7.put)

	connector single P9_think(P9.think)
	connector single P9_eat(P9.eat)
	connector rendezvous2 P9_pick_l(P9.pick_l, F9.pick)
	connector rendezvous2 P9_pick_r(P9.pick_r, F8.pick)
	connector rendezvous3 P9_put(P9.put, F9.put, F8.put)

	connector single P10_think(P10.think)
	connector single P10_eat(P10.eat)
	connector rendezvous2 P10_pick_l(P10.pick_l, F10.pick)
	connector rendezvous2 P10_pick_r(P10.pick_r, F9.pick)
	connector rendezvous3 P10_put(P10.put, F10.put, F9.put)

end

component Philos diningPhi

INVARSPEC !((P1.place == HAS_ONE_FORK) & (P2.place == HAS_ONE_FORK) & (P3.place == HAS_ONE_FORK) & (P4.place == HAS_ONE_FORK) & (P5.place == HAS_ONE_FORK) & (P6.place == HAS_ONE_FORK) & (P7.place == HAS_ONE_FORK) & (P8.place == HAS_ONE_FORK) & (P9.place == HAS_ONE_FORK) & (P10.place == HAS_ONE_FORK))

end